// Code generated by fenneg version (devel). DO NOT EDIT.

package portallog

import (
	"encoding/binary"

	"github.com/sirkon/errors"
	"github.com/sirkon/varsize"
)

const (
	portalLoggerCodeAddPortal    = 1
	portalLoggerCodeDeletePortal = 2
)

// AddPortal encodes arguments tuple of this method.
func (l *Encoding) AddPortal(name string, path string) []byte {
	lenName := varsize.Uint(uint(len(name))) + len(name)
	lenPath := varsize.Uint(uint(len(path))) + len(path)
	var buf []byte
	{
		bufSize := 4 + lenName + lenPath
		buf = l.allocateBuffer(varsize.Uint(uint64(bufSize)) + bufSize)

		// Encode record length.
		buf = binary.AppendUvarint(buf, uint64(bufSize))
	}

	// Encode branch (method) code.
	buf = binary.LittleEndian.AppendUint32(buf, uint32(portalLoggerCodeAddPortal))

	// Encode name(string).
	buf = binary.AppendUvarint(buf, uint64(len(name)))
	buf = append(buf, name...)

	// Encode path(string).
	buf = binary.AppendUvarint(buf, uint64(len(path)))
	buf = append(buf, path...)

	return buf
}

// DeletePortal encodes arguments tuple of this method.
func (l *Encoding) DeletePortal(name string) []byte {
	lenName := varsize.Uint(uint(len(name))) + len(name)
	var buf []byte
	{
		bufSize := 4 + lenName
		buf = l.allocateBuffer(varsize.Uint(uint64(bufSize)) + bufSize)

		// Encode record length.
		buf = binary.AppendUvarint(buf, uint64(bufSize))
	}

	// Encode branch (method) code.
	buf = binary.LittleEndian.AppendUint32(buf, uint32(portalLoggerCodeDeletePortal))

	// Encode name(string).
	buf = binary.AppendUvarint(buf, uint64(len(name)))
	buf = append(buf, name...)

	return buf
}

// EncodingDispatch dispatches encoded data made with Encoding
func EncodingDispatch(disp PortalLogger, rec []byte) error {
	if len(rec) < 4 {
		return errors.New("decode branch code: record buffer is too small").Uint64("length-required", uint64(4)).Int("length-actual", len(rec))
	}

	branch := binary.LittleEndian.Uint32(rec[:4])
	rec = rec[4:]

	switch branch {
	case portalLoggerCodeAddPortal:
		// Decode name(string).
		var name string
		{
			size, off := binary.Uvarint(rec)
			if off <= 0 {
				if off == 0 {
					return errors.New("decode AddPortal.name(string) length: record buffer is too small")
				}
				return errors.New("decode AddPortal.name(string) length: malformed uvarint sequence")
			}
			rec = rec[off:]
			if int(size) > len(rec) {
				return errors.New("decode AddPortal.name(string) content: record buffer is too small").Uint64("length-required", uint64(int(size))).Int("length-actual", len(rec))
			}
			name = string(rec[:size])
			rec = rec[size:]
		}

		// Decode path(string).
		var path string
		{
			size, off := binary.Uvarint(rec)
			if off <= 0 {
				if off == 0 {
					return errors.New("decode AddPortal.path(string) length: record buffer is too small")
				}
				return errors.New("decode AddPortal.path(string) length: malformed uvarint sequence")
			}
			rec = rec[off:]
			if int(size) > len(rec) {
				return errors.New("decode AddPortal.path(string) content: record buffer is too small").Uint64("length-required", uint64(int(size))).Int("length-actual", len(rec))
			}
			path = string(rec[:size])
			rec = rec[size:]
		}

		if len(rec) > 0 {
			return errors.New("decode AddPortal: the record was not emptied after the last argument decoded").Int("record-bytes-left", len(rec))
		}

		if err := disp.AddPortal(name, path); err != nil {
			return errors.Wrap(err, "call AddPortal")
		}

		return nil

	case portalLoggerCodeDeletePortal:
		// Decode name(string).
		var name string
		{
			size, off := binary.Uvarint(rec)
			if off <= 0 {
				if off == 0 {
					return errors.New("decode DeletePortal.name(string) length: record buffer is too small")
				}
				return errors.New("decode DeletePortal.name(string) length: malformed uvarint sequence")
			}
			rec = rec[off:]
			if int(size) > len(rec) {
				return errors.New("decode DeletePortal.name(string) content: record buffer is too small").Uint64("length-required", uint64(int(size))).Int("length-actual", len(rec))
			}
			name = string(rec[:size])
			rec = rec[size:]
		}

		if len(rec) > 0 {
			return errors.New("decode DeletePortal: the record was not emptied after the last argument decoded").Int("record-bytes-left", len(rec))
		}

		if err := disp.DeletePortal(name); err != nil {
			return errors.Wrap(err, "call DeletePortal")
		}

		return nil

	default:
		return errors.Newf("invalid branch code %d", branch).Uint32("invalid-branch-code", branch)
	}

	return nil
}
