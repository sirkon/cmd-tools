/*
 This file was autogenerated via
 ----------------------------------------
 ldetool generate --go-string filters.lde
 ----------------------------------------
 do not touch it with bare hands!
*/

package main

import (
	"strings"
)

var aces = "aces"
var launcher = "launcher"
var warSpaceThunder = "War Thunder"
var witcher3DotExe = "witcher3.exe"

// WarThunderAces ...
type WarThunderAces struct {
	Rest string
}

// Extract ...
func (p *WarThunderAces) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "aces" and then pass it
	pos = strings.Index(p.Rest, aces)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(aces):]
	} else {
		return false, nil
	}
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// WarThunderLauncher ...
type WarThunderLauncher struct {
	Rest string
}

// Extract ...
func (p *WarThunderLauncher) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "War Thunder" and then pass it
	pos = strings.Index(p.Rest, warSpaceThunder)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(warSpaceThunder):]
	} else {
		return false, nil
	}

	// Looking for "launcher" and then pass it
	pos = strings.Index(p.Rest, launcher)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(launcher):]
	} else {
		return false, nil
	}

	return true, nil
}

// Witcher3 ...
type Witcher3 struct {
	Rest string
}

// Extract ...
func (p *Witcher3) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "witcher3.exe" and then pass it
	pos = strings.Index(p.Rest, witcher3DotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(witcher3DotExe):]
	} else {
		return false, nil
	}
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}
