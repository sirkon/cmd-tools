// Code generated by ldetool generate --go-string filters.lde. DO NOT EDIT.

package main

import (
	"strings"
)

var constBslashesGjagentDotExe = "\\gjagent.exe"
var constCyberpunk = "Cyberpunk"
var constGTAIVDotExe = "GTAIV.exe"
var constGtaMinusVcDotExe = "gta-vc.exe"
var constHalfMinusLifeSpace2 = "Half-Life 2"
var constLauncher = "launcher"
var constMafiaSpaceDefinitiveSpaceEdition = "Mafia Definitive Edition"
var constPlayGTAIVDotExe = "PlayGTAIV.exe"
var constSlashDarkSpaceMessiah = "/Dark Messiah"
var constSlashShadowOfMordorSlash = "/ShadowOfMordor/"
var constSlashShadowOfWarSlash = "/ShadowOfWar/"
var constSlashTheSpaceWitcherSpace2Slash = "/the Witcher 2/"
var constWarSpaceThunder = "War Thunder"
var constWarThunderSlashLinux64SlashAces = "WarThunder/linux64/aces"
var constWitcher3DotExe = "witcher3.exe"
var constWitcherDotExe = "witcher.exe"

// WarThunderAces ...
type WarThunderAces struct {
	Rest string
}

// Extract ...
func (p *WarThunderAces) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "WarThunder/linux64/aces" and then pass it
	pos = strings.Index(p.Rest, constWarThunderSlashLinux64SlashAces)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constWarThunderSlashLinux64SlashAces):]
	} else {
		return false, nil
	}

	return true, nil
}

// WarThunderLauncher ...
type WarThunderLauncher struct {
	Rest string
}

// Extract ...
func (p *WarThunderLauncher) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "War Thunder" and then pass it
	pos = strings.Index(p.Rest, constWarSpaceThunder)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constWarSpaceThunder):]
	} else {
		return false, nil
	}

	// Looking for "launcher" and then pass it
	pos = strings.Index(p.Rest, constLauncher)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constLauncher):]
	} else {
		return false, nil
	}

	return true, nil
}

// GajinAgent ...
type GajinAgent struct {
	Rest string
}

// Extract ...
func (p *GajinAgent) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "\\gjagent.exe" and then pass it
	pos = strings.Index(p.Rest, constBslashesGjagentDotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constBslashesGjagentDotExe):]
	} else {
		return false, nil
	}

	// Check if the rest is empty
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// TheWitcher ...
type TheWitcher struct {
	Rest string
}

// Extract ...
func (p *TheWitcher) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "witcher.exe" and then pass it
	pos = strings.Index(p.Rest, constWitcherDotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constWitcherDotExe):]
	} else {
		return false, nil
	}

	// Check if the rest is empty
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// TheWitcher2 ...
type TheWitcher2 struct {
	Rest string
}

// Extract ...
func (p *TheWitcher2) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "/the Witcher 2/" and then pass it
	pos = strings.Index(p.Rest, constSlashTheSpaceWitcherSpace2Slash)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constSlashTheSpaceWitcherSpace2Slash):]
	} else {
		return false, nil
	}

	return true, nil
}

// TheWitcher3 ...
type TheWitcher3 struct {
	Rest string
}

// Extract ...
func (p *TheWitcher3) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "witcher3.exe" and then pass it
	pos = strings.Index(p.Rest, constWitcher3DotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constWitcher3DotExe):]
	} else {
		return false, nil
	}

	// Check if the rest is empty
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// GTAViceCity ...
type GTAViceCity struct {
	Rest string
}

// Extract ...
func (p *GTAViceCity) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "gta-vc.exe" and then pass it
	pos = strings.Index(p.Rest, constGtaMinusVcDotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constGtaMinusVcDotExe):]
	} else {
		return false, nil
	}

	// Check if the rest is empty
	if len(p.Rest) != 0 {
		return false, nil
	}

	return true, nil
}

// ShadowOfMordor ...
type ShadowOfMordor struct {
	Rest string
}

// Extract ...
func (p *ShadowOfMordor) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "/ShadowOfMordor/" and then pass it
	pos = strings.Index(p.Rest, constSlashShadowOfMordorSlash)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constSlashShadowOfMordorSlash):]
	} else {
		return false, nil
	}

	return true, nil
}

// ShadowOfWar ...
type ShadowOfWar struct {
	Rest string
}

// Extract ...
func (p *ShadowOfWar) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "/ShadowOfWar/" and then pass it
	pos = strings.Index(p.Rest, constSlashShadowOfWarSlash)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constSlashShadowOfWarSlash):]
	} else {
		return false, nil
	}

	return true, nil
}

// DarkMessiah ...
type DarkMessiah struct {
	Rest string
}

// Extract ...
func (p *DarkMessiah) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "/Dark Messiah" and then pass it
	pos = strings.Index(p.Rest, constSlashDarkSpaceMessiah)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constSlashDarkSpaceMessiah):]
	} else {
		return false, nil
	}

	return true, nil
}

// Cyberpunk ...
type Cyberpunk struct {
	Rest string
}

// Extract ...
func (p *Cyberpunk) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "Cyberpunk" and then pass it
	pos = strings.Index(p.Rest, constCyberpunk)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constCyberpunk):]
	} else {
		return false, nil
	}

	return true, nil
}

// GTAIVPlay ...
type GTAIVPlay struct {
	Rest string
}

// Extract ...
func (p *GTAIVPlay) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "PlayGTAIV.exe" and then pass it
	pos = strings.Index(p.Rest, constPlayGTAIVDotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constPlayGTAIVDotExe):]
	} else {
		return false, nil
	}

	return true, nil
}

// GTAIV ...
type GTAIV struct {
	Rest string
}

// Extract ...
func (p *GTAIV) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "GTAIV.exe" and then pass it
	pos = strings.Index(p.Rest, constGTAIVDotExe)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constGTAIVDotExe):]
	} else {
		return false, nil
	}

	return true, nil
}

// Mafia ...
type Mafia struct {
	Rest string
}

// Extract ...
func (p *Mafia) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "Mafia Definitive Edition" and then pass it
	pos = strings.Index(p.Rest, constMafiaSpaceDefinitiveSpaceEdition)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constMafiaSpaceDefinitiveSpaceEdition):]
	} else {
		return false, nil
	}

	return true, nil
}

// HalfLife2 ...
type HalfLife2 struct {
	Rest string
}

// Extract ...
func (p *HalfLife2) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Looking for "Half-Life 2" and then pass it
	pos = strings.Index(p.Rest, constHalfMinusLifeSpace2)
	if pos >= 0 {
		p.Rest = p.Rest[pos+len(constHalfMinusLifeSpace2):]
	} else {
		return false, nil
	}

	return true, nil
}
