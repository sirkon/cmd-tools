
/*
 This file was autogenerated via
 -------------------------------------------
 ldetool generate --go-string commit-msg.lde
 -------------------------------------------
 do not touch it with bare hands!
*/

package main

import (
	"fmt"
	"strconv"
	"strings"
)

var spaceBarSpace = " | "

// CommitMsg ...
type CommitMsg struct {
	Rest   string
	Prefix string
	Text   string
}

// Extract ...
func (p *CommitMsg) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Take until " | " as Prefix(string)
	pos = strings.Index(p.Rest, spaceBarSpace)
	if pos >= 0 {
		p.Prefix = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(spaceBarSpace):]
	} else {
		return false, nil
	}

	// Take the rest as Text(string)
	p.Text = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// BranchNameValidator ...
type BranchNameValidator struct {
	Rest   string
	Prefix string
	Task   uint
}

// Extract ...
func (p *BranchNameValidator) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmpUint uint64

	// Take until '-' as Prefix(string)
	pos = strings.IndexByte(p.Rest, '-')
	if pos >= 0 {
		p.Prefix = p.Rest[:pos]
		p.Rest = p.Rest[pos+1:]
	} else {
		return false, nil
	}

	// Take the rest as Task(uint)
	if tmpUint, err = strconv.ParseUint(p.Rest, 10, 64); err != nil {
		return false, fmt.Errorf("cannot parse `%s` into field Task(uint): %s", p.Rest, err)
	}
	p.Task = uint(tmpUint)
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}
